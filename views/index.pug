extends layout

block content
  link(rel='stylesheet', href='/stylesheets/index.css')
  //- link(rel='stylesheet', href='/stylesheets/lib/jquery.highlight-within-textarea.css')
  //- script(src='/javascripts/lib/jquery.highlight-within-textarea.js')
  script(src='/plotly.min.js')
  div(class='page')
    div(class="container")
      div(class="row")
        div(class="col-lg-6")
          form(role="form")
            div(class="form-group editorArea")
              h4(class='editor-title') Editor
              textarea(class="form-control", spellcheck='false', id="netlist", rows="17")
                //- Example file
                | *** RF switch circuit ***
                |  * Author: Xing GUO
                |  * Example file
                |  * Input source
                |  vs 1 0 dc 0V ac 1V sin(0V 1V 100MegHz 20ns 0)
                |  Rs in 1 50ohm
                |
                | * Switch
                | Ci in 4 1.6nF
                | Rb 4 3 2.1k
                | Lc1 3 2 100uH
                | D1 4 50 mydiode
                | vmeter 50 5 dc 0
                | Lc2 5 0 100uH
                | cout 5 out 1.6n
                |
                | * Load
                | Rload out 0 1k
                |
                | * DC biasing
                | vcc 2 0 5V
                |             
                | .model mydiode d (is=1e-15A n=1)
                |
                | .tran .1ns 100ns
                |
                | * Please do not remove this line
                | .control
                |   run
                | .endc
                | .end
              strong ⚠️ Warning: Your data will be cleared after closing the browser  ;)
        div(class="plot", id="plot", style='margin-top: 35px; width: 500px; height: 420px')
      div(class='row')
        div(class='col-lg-6')
          h4(class='option-title') Plot Option
          textarea(class="form-control", id="plot_option", spellcheck='false', rows="3") [{"name": "v(in)", "curve": "v(in)"}, {"name": "v(out)", "curve": "v(out)"}]
          div(class="buttonArea")
            button(id="run-code", class="btn btn-success", style='margin-right: 5px') Run Code
            button(id="upload-lib", class="btn btn-success", style='margin-right: 5px') Upload Lib
            button(id="save-netlist", class="btn btn-success", style='margin-right: 5px') Save Netlist
            button(id="clear-plot", class="btn btn-danger", style='margin-right: 5px') Clear Plots
        div(class='terminal', style='width: 500px;')
          //- div(class='terminal', style='width=600px')
          //-   h4(class='terminal-title') Info Area
          h4(class='terminal-title', style='margin-top: 10px;') Terminal Output
          div(class='terminal-edge')
            div(id='terminal', class='terminal-text-area', style='margin-top: 5px; margin-right: 5px;margin-left: 5px; height:150px; overflow:auto;')
              div(class='initial-info')
                span(class='badge badge-info') Info
                span &nbsp;
                span Server message will be displayed here :)
          
  //- scripts
  script(src='/socket.io/socket.io.js')
  - let socket_url = socket_conf;
  //- socket things
  script.
    let socket = io.connect('#{socket_url}');
    // connect succeed
    socket.on('loading-page', function (data) {
      socket.emit('socket-id', { socket_id: socket.id });
    });
    
  script.
    // button callback event
    let netlist_content = document.getElementById('netlist');
    let plot_option_content = document.getElementById('plot_option');
    let submit_button = document.getElementById('run-code');
    let upload_lib_button = document.getElementById('upload-lib');
    let save_netlist_button = document.getElementById('save-netlist');
    let clear_plot_button = document.getElementById('clear-plot');
    
    // submit_button callback
    submit_button.addEventListener('click', () => {
      let netlist = netlist_content.value;
      let plot_option = plot_option_content.value
      socket.emit('netlist-data', { socket_id: socket.id, netlist: netlist, plot_option: plot_option });
    });
    
    // upload lib files
    upload_lib_button.addEventListener('click', () => {
      // do nothing
      
    });
    
    // save_netlist_button callback
    save_netlist_button.addEventListener('click', () => {
      // do nothing
    });
    
    // clear_plot_button callback
    clear_plot_button.addEventListener('click', () => {
      Plotly.purge('plot');
    });
    
  script.
    // display server message
    socket.on('server-msg', (data) => {
      let terminal = document.getElementById('terminal');
      if (data.type == 'error') {
        let div = document.createElement('div');
        let badge = document.createElement('span');
        let text = document.createTextNode(' error ');
        badge.className = 'badge badge-danger';
        badge.appendChild(text);
        div.appendChild(badge);
        let blank = document.createElement('span');
        text = document.createTextNode(' ');
        div.appendChild(text);
        let msg = document.createElement('span');
        text = document.createTextNode(data.msg);
        div.appendChild(text);
        terminal.appendChild(div);
      } else if (data.type == 'info') {
        let div = document.createElement('div');
        let badge = document.createElement('span');
        let text = document.createTextNode(' info ');
        badge.className = 'badge badge-info';
        badge.appendChild(text);
        div.appendChild(badge);
        let blank = document.createElement('span');
        text = document.createTextNode(' ');
        div.appendChild(text);
        let msg = document.createElement('span');
        text = document.createTextNode(data.msg);
        div.appendChild(text);
        terminal.appendChild(div);
      }
      terminal.scrollTop = terminal.scrollHeight;
    });
    
  //- plotly.js things
  script.
    let colors = ['rgb(148, 0, 211)', 'rgb(255, 127, 0)', 'rgb(0, 0, 255)', 
                  'rgb(255, 0 , 0)', 'rgb(255, 255, 0)', 'rgb(75, 0, 130)',
                  'rgb(0, 255, 0)']
    socket.on('netlist-data', (data) => {
      
      // plot graph
      let traces = [];
      let curve_names = {};
      for (var i = 0; i < data.curves.length; i ++) {
        let showLegend = false;
        if (!curve_names[data.label_info[data.curves[i].belong_to]]) {
          showLegend = true;
          curve_names[data.label_info[data.curves[i].belong_to]] = 1;
        }
        
        traces.push({ x: data.curves[i].x, 
                      y: data.curves[i].y, 
                      connectgaps: false, 
                      showlegend: showLegend,
                      name: data.label_info[data.curves[i].belong_to],
                      marker: {color: colors[data.curves[i].belong_to]}});
      }
      Plotly.newPlot('plot', traces);
    });
    
